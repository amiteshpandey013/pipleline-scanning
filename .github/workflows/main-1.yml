name: Docker Build, Scan, and Push

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-scan-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write # For OIDC to AWS
    env:
      SYSDIG_API_TOKEN: ${{ secrets.SYSDIG_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build the Docker image
        run: docker build -t my-app:latest .

      - name: Run Sysdig scan
        id: sysdig-scan
        continue-on-error: true # Important: Allow workflow to continue
        run: |
          docker run --rm \
            -e SYSDIG_API_TOKEN="${{ env.SYSDIG_API_TOKEN }}" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            sysdig/sysdig-cli image-scan my-app:latest
      - name: Check scan result and display link
        if: always() # Run this step regardless of previous step's outcome
        run: |
          SCAN_ID=$(grep -oE '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' <<< "${{ steps.sysdig-scan.outcome }}")
          if [[ -n "$SCAN_ID" ]]; then
            echo "Sysdig Scan Result: https://secure.sysdig.com/#/scanning/result/$SCAN_ID"
          else
            echo "Could not extract scan ID from output"
          fi

      - name: Configure AWS credentials
        if: steps.sysdig-scan.outcome == 'success'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::YOUR_AWS_ACCOUNT_ID:role/YOUR_GITHUB_ACTIONS_ROLE
          aws-region: YOUR_AWS_REGION

      - name: Login to Amazon ECR
        if: steps.sysdig-scan.outcome == 'success'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push to ECR
        if: steps.sysdig-scan.outcome == 'success'
        run: |
          IMAGE_ID=my-app:latest
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/your-repo-name:$GITHUB_SHA"
          docker tag $IMAGE_ID $IMAGE_URI
          docker push $IMAGE_URI
          echo "Pushed image to $IMAGE_URI"
